/*
Copyright 2019 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/google/knative-gcp/pkg/apis/events/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StackdriverLister helps list Stackdrivers.
type StackdriverLister interface {
	// List lists all Stackdrivers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Stackdriver, err error)
	// Stackdrivers returns an object that can list and get Stackdrivers.
	Stackdrivers(namespace string) StackdriverNamespaceLister
	StackdriverListerExpansion
}

// stackdriverLister implements the StackdriverLister interface.
type stackdriverLister struct {
	indexer cache.Indexer
}

// NewStackdriverLister returns a new StackdriverLister.
func NewStackdriverLister(indexer cache.Indexer) StackdriverLister {
	return &stackdriverLister{indexer: indexer}
}

// List lists all Stackdrivers in the indexer.
func (s *stackdriverLister) List(selector labels.Selector) (ret []*v1alpha1.Stackdriver, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Stackdriver))
	})
	return ret, err
}

// Stackdrivers returns an object that can list and get Stackdrivers.
func (s *stackdriverLister) Stackdrivers(namespace string) StackdriverNamespaceLister {
	return stackdriverNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StackdriverNamespaceLister helps list and get Stackdrivers.
type StackdriverNamespaceLister interface {
	// List lists all Stackdrivers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Stackdriver, err error)
	// Get retrieves the Stackdriver from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Stackdriver, error)
	StackdriverNamespaceListerExpansion
}

// stackdriverNamespaceLister implements the StackdriverNamespaceLister
// interface.
type stackdriverNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Stackdrivers in the indexer for a given namespace.
func (s stackdriverNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Stackdriver, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Stackdriver))
	})
	return ret, err
}

// Get retrieves the Stackdriver from the indexer for a given namespace and name.
func (s stackdriverNamespaceLister) Get(name string) (*v1alpha1.Stackdriver, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("stackdriver"), name)
	}
	return obj.(*v1alpha1.Stackdriver), nil
}
